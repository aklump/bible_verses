<?php
/**
 * @file
 * Models
 *
 * @ingroup bible_verses
 * @{
 */

/**
 * Interface VerseInterface
 */
interface VerseInterface {
  public function setBook($bookname);
  public function getBook();
  public function setChapter($chapter);
  public function getChapter();
  public function setVerse($verse);
  public function getVerse();
  public function setText($text);
  public function addText($text);
  public function getText();
}

/**
 * Class Quote
 */
class Verse implements VerseInterface {
  protected $book, $chapter, $verse, $text;

  /**
   * Constructor
   * @param string $verse
   *   Something like 'John 3:16'
   */
  public function __construct($string) {
    if (preg_match('/(.*?) ?(\d+)\:([-\d]+)/', $string, $parts)) {
      $this->setBook($parts[1]);
      $this->setChapter($parts[2]);
      $this->setVerse($parts[3]);
    }
  }

  /**
   * Return the reference string including book, chapter and verse
   *
   * @return string
   */
  public function getReference() {
    if ($this->getBook()) {
      return $this->getBook() . ' ' . $this->getChapter() . ':' . $this->getVerse();
    }
    return '';
  }

  public function setBook($book){
    $this->book = $book;
    return TRUE;
  }

  public function getBook() {
    return $this->book;
  }

  public function setChapter($chapter){
    $this->chapter = $chapter;
    return TRUE;
  }

  public function getChapter() {
    return $this->chapter;
  }

  public function setVerse($verse){
    $this->verse = $verse;
    return TRUE;
  }

  public function getVerse() {
    return $this->verse;
  }

  public function setText($text){
    $this->text = $text;
    return TRUE;
  }

  public function addText($text){
    $current = $this->getText();
    $this->text = $current . ' ' . trim($text);
    return TRUE;
  }

  public function getText() {
    return trim($this->text);
  }
}

/**
 * Interface BibleInterface
 */
interface BibleInterface {
  public function lookup(Verse $verse);
}

/**
 * Class Bible
 */
abstract class Bible implements BibleInterface {

  protected $url, $query, $response, $http_code;

  /**
   * Constructor
   */
  public function __construct($options = array()) {
    $this->query = $options;
  }

  /**
   * Lookup a verse in a bible and return the results
   */
  public function lookup(Verse $verse) {
    $this->query($verse);
    return $verse;
  }

  /**
   * Make the api call to retrieve the verse
   */
  protected function query(Verse $verse) {
    if ($verse->getReference()) {
      $this->query['passage'] = $verse->getReference();
      $url = $this->url;
      $url .= strstr($url, '?') ? '&' : '?';
      foreach ($this->query as $key => $value) {
        $url .= "&$key=" . urlencode($value);
      }

      $cache_key = md5($url);
      if (file_exists("./cache/$cache_key")) {
        $this->response = file_get_contents("./cache/$cache_key");
        $this->http_code = 200;
      }
      else {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_HEADER, FALSE);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
        curl_setopt($ch, CURLOPT_FAILONERROR, TRUE);
        curl_setopt($ch, CURLINFO_HEADER_OUT, TRUE);
        $this->response = curl_exec($ch);
        $this->http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        if ($this->http_code < 300) {
          $handle = fopen("./cache/$cache_key", 'w');
          fwrite($handle, $this->response);
          fclose($handle);
        }
        curl_close($ch);
      }

    }
    return $this;
  }
}

/**
 * Class DouayRheims
 */
class DouayRheims extends Bible implements BibleInterface {

  protected $url = 'http://api.preachingcentral.com/bible.php';

  /**
   * Constructor
   */
  public function __construct($options = array()) {
    parent::__construct($options);
    $this->query += array(
      'version' => 'douayrheims',
    );
  }

  /**
   * Parse the return xml into the Verse
   */
  protected function query(Verse $verse) {
    parent::query($verse);
    if ($this->http_code < 300
        && ($xml = simplexml_load_string($this->response))
        && (!empty($xml->range->item))) {
      foreach ($xml->range->item as $item) {
        $verse->setBook((string) $item->bookname);
        $verse->addText((string) $item->text);
      }
    }
  }
}

/**
 * Interface NavigationInterface
 */
interface NavigationInterface {
  /**
   * Return the index array
   *
   * @return array
   *   Each element contains:
   *   - text: The text to show
   *   - path: The link to the path
   *   - description: A description of the page
   *   - file: The filepath of the source data
   */
  public function getIndex();

  /**
   * Return an array to link to the index homepage
   *
   * @return array
   */
  public function getHome();

  /**
   * Return an array to link to the prev page
   *
   * @return array
   */
  public function getNext();

  /**
   * Return an array to link to the next page
   *
   * @return array
   */
  public function getPrev();
}

/**
 * Class Navigation
 */
class Navigation implements NavigationInterface {
  public function getIndex() {
    $pages = array();
    $directory = 'pages';
    $recursive = TRUE;
    $files = $this->listFiles($directory, $recursive);
    foreach ($files as $file) {
      if (preg_match('/pages\/(.*)\.txt/', $file, $found)) {
        $pages[] = array(
          //@todo way to populate this
          'text' => $found[1],
          'path' => $found[1],
          //@todo Some way to populate this
          'description' => '',
          'file' => realpath($file),
        );
      }
    }
    asort($pages);
    return $pages;
  }

  private function listFiles($directory, $recursive) {
    $array_items = array();
    if ($handle = opendir($directory)) {
      while (false !== ($file = readdir($handle))) {
        if ($file != "." && $file != "..") {
          if (is_dir($directory. "/" . $file)) {
            if($recursive) {
              $array_items = array_merge($array_items, $this->listFiles($directory. "/" . $file, $recursive));
            }
            $file = $directory . "/" . $file;
            $array_items[] = preg_replace("/\/\//si", "/", $file);
            }
            else {
              $file = $directory . "/" . $file;
              $array_items[] = preg_replace("/\/\//si", "/", $file);
            }
          }
        }
        closedir($handle);
      }
    return $array_items;
  }
  public function getHome() {
    if (!empty($_GET['q'])) {
      $path = $_SERVER['PHP_SELF'];
      return array(
        'text' => 'Home',
        'path' => $path,
        'description' => '',
        'file' => realpath($path),
      );
    }
  }
  public function getNext() {
    if (empty($_GET['q'])) {
      return;
    }
    $index = $this->getIndex();
    foreach ($index as $item) {
      if ($item['path'] == $_GET['q']) {
        return current($index);
      }
    }
  }
  public function getPrev() {
    if (empty($_GET['q'])) {
      return;
    }
    $index = $this->getIndex();
    $prev = end($index);
    foreach ($index as $item) {
      if ($item['path'] == $_GET['q']) {
        return $prev;
      }
      $prev = $item;
    }
  }
}

/** @} */ //end of group: bible_verses
